blueprint:
  name: Differential Grain Cooling Fan Control
  description: >
    Controls a fan for grain cooling based on heap vs shed temperature difference,
    grain moisture, and air humidity. Includes safety check for fans_allowed_to_run
    and optional minimum runtime to avoid short cycling.
  domain: automation
  source_url: https://github.com/f2tmg/Open-Farm-Sensors/blob/main/Blueprints/Differential%20Grain%20Cooling.yaml
  input:
    heap_temp_sensor:
      name: Heap Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    shed_temp_sensor:
      name: Shed Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    grain_moisture_sensor:
      name: Grain Moisture Sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
          multiple: false
    grain_moisture_threshold:
      name: Max Grain Moisture (%)
      default: 15
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 0.1
          mode: slider
    air_humidity_sensor:
      name: Air Humidity Sensor
      selector:
        entity:
          domain: sensor
          device_class: humidity
    air_humidity_threshold:
      name: Max Air Humidity (%)
      default: 70
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          step: 1
          mode: slider
    temp_diff_required:
      name: Required Temperature Difference (°C)
      default: 5
      selector:
        number:
          min: 0
          max: 20
          unit_of_measurement: "°C"
          step: 0.1
          mode: slider
    fan_switch:
      name: Fan Switch
      selector:
        entity:
          domain: switch
    fans_allowed_sensor:
      name: Fans Allowed to Run Sensor
      selector:
        entity:
          domain: binary_sensor
    min_runtime:
      name: Minimum Runtime (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: "min"
          step: 1
          mode: slider
mode: single
variables:
  heap_temp_sensor: !input heap_temp_sensor
  shed_temp_sensor: !input shed_temp_sensor
  grain_moisture_sensor: !input grain_moisture_sensor
  air_humidity_sensor: !input air_humidity_sensor
  fan_switch: !input fan_switch
  fans_allowed_sensor: !input fans_allowed_sensor
  temp_diff_required: !input temp_diff_required
  grain_moisture_threshold: !input grain_moisture_threshold
  air_humidity_threshold: !input air_humidity_threshold
  min_runtime: !input min_runtime
trigger:
  - platform: time_pattern
    minutes: "/1"  # Check every minute
action:
  - choose:
      # Branch 1: Safety - If fans are not allowed, always turn off the fan
      - conditions:
          - condition: template
            value_template: >
              {{ is_state(fans_allowed_sensor, 'off') }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch

      # Branch 2: All run conditions met - Turn fan ON
      - conditions:
          - condition: template
            value_template: >
              {{
                is_state(fans_allowed_sensor, 'on')
                and (states(heap_temp_sensor) | float - states(shed_temp_sensor) | float) > temp_diff_required
                and (
                  (grain_moisture_sensor == "" )
                  or (states(grain_moisture_sensor) | float < grain_moisture_threshold)
                )
                and (states(air_humidity_sensor) | float) < air_humidity_threshold
                and (now() - as_datetime(states[fan_switch].last_changed)).total_seconds() > (min_runtime * 60)
              }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch

      # Branch 3: Any stop condition met (except safety) - Turn fan OFF
      - conditions:
          - condition: template
            value_template: >
              {{
                (
                  (states(heap_temp_sensor) | float - states(shed_temp_sensor) | float) < temp_diff_required
                  or (
                    grain_moisture_sensor != ""
                    and (states(grain_moisture_sensor) | float) > grain_moisture_threshold
                  )
                  or (states(air_humidity_sensor) | float) > air_humidity_threshold
                )
                and (now() - as_datetime(states[fan_switch].last_changed)).total_seconds() > (min_runtime * 60)
              }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch
